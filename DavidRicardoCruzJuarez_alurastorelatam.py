# -*- coding: utf-8 -*-
"""AluraStoreLatam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S_k_UmQ_pBhZrn-t_DvbZ5FzbkXn_vqn

### Importaci√≥n de datos
"""

import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_4.csv"

tienda = pd.read_csv(url)
tienda2 = pd.read_csv(url2)
tienda3 = pd.read_csv(url3)
tienda4 = pd.read_csv(url4)

tienda.head()

"""#1. An√°lisis de facturaci√≥n


"""

# C√°lculo de ingresos por tienda (sumando columna 'Precio')
ingresos_tienda_1 = tienda['Precio'].sum()
ingresos_tienda_2 = tienda2['Precio'].sum()
ingresos_tienda_3 = tienda3['Precio'].sum()
ingresos_tienda_4 = tienda4['Precio'].sum()

# Mostrar resultados
print(f'üü¶ Tienda 1: ${ingresos_tienda_1:,.2f}')
print(f'üü© Tienda 2: ${ingresos_tienda_2:,.2f}')
print(f'üü® Tienda 3: ${ingresos_tienda_3:,.2f}')
print(f'üü• Tienda 4: ${ingresos_tienda_4:,.2f}')

import matplotlib.pyplot as plt

ingresos = [ingresos_tienda_1, ingresos_tienda_2, ingresos_tienda_3, ingresos_tienda_4]
tiendas = ['Tienda 1', 'Tienda 2', 'Tienda 3', 'Tienda 4']
colores = ['steelblue', 'seagreen', 'gold', 'crimson']

plt.figure(figsize=(6, 5))
plt.bar(tiendas, ingresos, color=colores)
plt.title('Ingresos Totales por Tienda')
plt.xlabel('Tienda')
plt.ylabel('Ingresos ($)')
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.show()

"""# 2. Ventas por categor√≠a"""

#Ahora hacemos lo mismo que en la primera  pero con la columna categoria,

# Conteo de productos vendidos por categor√≠a en cada tienda
categorias_t1 = tienda['Categor√≠a del Producto'].value_counts()
categorias_t2 = tienda2['Categor√≠a del Producto'].value_counts()
categorias_t3 = tienda3['Categor√≠a del Producto'].value_counts()
categorias_t4 = tienda4['Categor√≠a del Producto'].value_counts()

# Visualizaci√≥n textual r√°pida
print("üè™ Tienda 1:\n", categorias_t1, "\n")
print("üè¨ Tienda 2:\n", categorias_t2, "\n")
print("üè≠ Tienda 3:\n", categorias_t3, "\n")
print("üèöÔ∏è Tienda 4:\n", categorias_t4)

# Ejemplo con Tienda 1
categorias_t1.plot(kind='bar', color='skyblue', figsize=(8,4))
plt.title('Productos Vendidos por Categor√≠a - Tienda 1')
plt.xlabel('Categor√≠a')
plt.ylabel('Cantidad de Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Tienda 2
categorias_t2.plot(kind='bar', color='mediumseagreen', figsize=(8,4))
plt.title('Productos Vendidos por Categor√≠a - Tienda 2')
plt.xlabel('Categor√≠a')
plt.ylabel('Cantidad de Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Tienda 3
categorias_t3.plot(kind='bar', color='gold', figsize=(8,4))
plt.title('Productos Vendidos por Categor√≠a - Tienda 3')
plt.xlabel('Categor√≠a')
plt.ylabel('Cantidad de Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Tienda 4
categorias_t4.plot(kind='bar', color='indianred', figsize=(8,4))
plt.title('Productos Vendidos por Categor√≠a - Tienda 4')
plt.xlabel('Categor√≠a')
plt.ylabel('Cantidad de Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""# 3. Calificaci√≥n promedio de la tienda

"""

#Ahora los mismo con la columna clasificacion

# Calificaci√≥n promedio por tienda
calif_t1 = tienda['Calificaci√≥n'].mean()
calif_t2 = tienda2['Calificaci√≥n'].mean()
calif_t3 = tienda3['Calificaci√≥n'].mean()
calif_t4 = tienda4['Calificaci√≥n'].mean()

# Mostramos resultados con formato
print(f'üü¶ Tienda 1: {calif_t1:.2f} ‚≠ê')
print(f'üü© Tienda 2: {calif_t2:.2f} ‚≠ê')
print(f'üü® Tienda 3: {calif_t3:.2f} ‚≠ê')
print(f'üü• Tienda 4: {calif_t4:.2f} ‚≠ê')

import matplotlib.pyplot as plt

calificaciones = [calif_t1, calif_t2, calif_t3, calif_t4]
tiendas = ['Tienda 1', 'Tienda 2', 'Tienda 3', 'Tienda 4']
colores = ['steelblue', 'seagreen', 'gold', 'crimson']

plt.figure(figsize=(8, 4))
plt.barh(tiendas, calificaciones, color=colores)
plt.xlabel('Calificaci√≥n Promedio')
plt.title('Satisfacci√≥n del Cliente por Tienda')
plt.xlim(3.8, 4.1)
plt.grid(axis='x', linestyle='--', alpha=0.05)
plt.tight_layout()
plt.show()

"""# 4. Productos m√°s y menos vendidos"""

# Funci√≥n para imprimir el top y flop de una tienda
def mostrar_top_flop(df, nombre_tienda):
    conteo_productos = df['Producto'].value_counts()
    top_producto = conteo_productos.idxmax()
    top_ventas = conteo_productos.max()
    flop_producto = conteo_productos.idxmin()
    flop_ventas = conteo_productos.min()

    print(f"üè¨ {nombre_tienda}")
    print(f"üü¢ M√°s vendido: {top_producto} ‚Äì {top_ventas} ventas")
    print(f"üî¥ Menos vendido: {flop_producto} ‚Äì {flop_ventas} ventas\n")

# Aplicar a cada tienda
mostrar_top_flop(tienda, "Tienda 1")
mostrar_top_flop(tienda2, "Tienda 2")
mostrar_top_flop(tienda3, "Tienda 3")
mostrar_top_flop(tienda4, "Tienda 4")

# Ejemplo gr√°fico para Tienda 1 (Top y Flop)
top5_t1 = tienda['Producto'].value_counts().head(5)
flop5_t1 = tienda['Producto'].value_counts().tail(5)

# Gr√°fico combinado
fig, axes = plt.subplots(1, 2, figsize=(12, 5))
top5_t1.plot(kind='bar', color='limegreen', ax=axes[0])
axes[0].set_title('Top 5 - Tienda 1')
axes[0].set_ylabel('Ventas')

flop5_t1.plot(kind='bar', color='tomato', ax=axes[1])
axes[1].set_title('Flop 5 - Tienda 1')

for ax in axes:
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.tight_layout()
plt.show()

# Ejemplo gr√°fico para Tienda 2 (Top y Flop)
top5_t2 = tienda2['Producto'].value_counts().head(5)
flop5_t2 = tienda2['Producto'].value_counts().tail(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 5))
top5_t2.plot(kind='bar', color='mediumseagreen', ax=axes[0])
axes[0].set_title('Top 5 - Tienda 2')
axes[0].set_ylabel('Ventas')

flop5_t2.plot(kind='bar', color='salmon', ax=axes[1])
axes[1].set_title('Flop 5 - Tienda 2')

for ax in axes:
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.tight_layout()
plt.show()

# Ejemplo gr√°fico para Tienda 3 (Top y Flop)
top5_t3 = tienda3['Producto'].value_counts().head(5)
flop5_t3 = tienda3['Producto'].value_counts().tail(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 5))
top5_t3.plot(kind='bar', color='gold', ax=axes[0])
axes[0].set_title('Top 5 - Tienda 3')
axes[0].set_ylabel('Ventas')

flop5_t3.plot(kind='bar', color='indianred', ax=axes[1])
axes[1].set_title('Flop 5 - Tienda 3')

for ax in axes:
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.tight_layout()
plt.show()

# Ejemplo gr√°fico para Tienda 4 (Top y Flop)
top5_t4 = tienda4['Producto'].value_counts().head(5)
flop5_t4 = tienda4['Producto'].value_counts().tail(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 5))
top5_t4.plot(kind='bar', color='crimson', ax=axes[0])
axes[0].set_title('Top 5 - Tienda 4')
axes[0].set_ylabel('Ventas')

flop5_t4.plot(kind='bar', color='lightcoral', ax=axes[1])
axes[1].set_title('Flop 5 - Tienda 4')

for ax in axes:
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

plt.tight_layout()
plt.show()

"""# 5. Env√≠o promedio por tienda"""

# C√°lculo del costo promedio de env√≠o por tienda
envio_prom_t1 = tienda['Costo de env√≠o'].mean()
envio_prom_t2 = tienda2['Costo de env√≠o'].mean()
envio_prom_t3 = tienda3['Costo de env√≠o'].mean()
envio_prom_t4 = tienda4['Costo de env√≠o'].mean()

# Mostrar resultados con dos decimales
print(f'üü¶ Tienda 1: ${envio_prom_t1:.2f}')
print(f'üü© Tienda 2: ${envio_prom_t2:.2f}')
print(f'üü® Tienda 3: ${envio_prom_t3:.2f}')
print(f'üü• Tienda 4: ${envio_prom_t4:.2f}')

costos_envio = [envio_prom_t1, envio_prom_t2, envio_prom_t3, envio_prom_t4]
tiendas = ['Tienda 1', 'Tienda 2', 'Tienda 3', 'Tienda 4']
colores = ['slateblue', 'mediumseagreen', 'gold', 'crimson']

plt.figure(figsize=(15, 4))
plt.barh(tiendas, costos_envio, color=colores)
plt.xlabel('Costo Promedio de Env√≠o ($)')
plt.title('Comparativa de Costos de Env√≠o por Tienda')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""# üßæ Informe Final ‚Äì An√°lisis de Desempe√±o de Tiendas: Alura Store

## üìå Introducci√≥n

El presente informe tiene como finalidad asistir al Sr. Juan en la toma de decisi√≥n sobre cu√°l de sus cuatro tiendas en la cadena **Alura Store** debe vender para liberar recursos e invertir en un nuevo emprendimiento. Para ello, se analizaron datos de ventas, calificaciones de clientes, productos y log√≠stica utilizando **pandas** para procesamiento de datos y **matplotlib** para visualizaci√≥n.

## üìä Resultados del an√°lisis

### 1. Ingresos Totales por Tienda

| Tienda   | Ingreso Total ($) |
|----------|-------------------|
| Tienda 1 | 103,905.94        |
| Tienda 2 | 114,422.16        |
| Tienda 3 | 105,458.73        |
| Tienda 4 | **88,144.48**     |

üîª *Tienda 4 tiene el menor ingreso, lo que indica bajo rendimiento comercial.*

---

### 2. Categor√≠as M√°s Vendidas

- **Tienda 1**: Moda y Tecnolog√≠a
- **Tienda 2**: Fuerte concentraci√≥n en Tecnolog√≠a
- **Tienda 3**: Diversificaci√≥n equilibrada entre Muebles, Moda y Accesorios
- **Tienda 4**: Moda, con muy poca variedad

üìâ *La Tienda 4 tiene una oferta limitada, lo que afecta su competitividad.*

---

### 3. Calificaci√≥n Promedio de los Clientes

| Tienda   | Calificaci√≥n Promedio |
|----------|------------------------|
| Tienda 1 | 4.06 ‚≠ê                |
| Tienda 2 | 4.06 ‚≠ê                |
| Tienda 3 | 4.03 ‚≠ê                |
| Tienda 4 | **3.94 ‚≠ê**            |

üî¥ *Tienda 4 tiene la calificaci√≥n m√°s baja, sugiriendo menor satisfacci√≥n del cliente.*

---

### 4. Productos M√°s y Menos Vendidos

**Tienda 1:**  
üü¢ M√°s vendido: Auriculares Deportivos  
üî¥ Menos vendido: Reloj Anal√≥gico de Pared  

**Tienda 2:**  
üü¢ M√°s vendido: Smartphone X Series  
üî¥ Menos vendido: Cafetera Compacta  

**Tienda 3:**  
üü¢ M√°s vendido: Camisa Casual Hombre  
üî¥ Menos vendido: L√°mpara Vintage  

**Tienda 4:**  
üü¢ M√°s vendido: Zapatillas Urbanas  
üî¥ Menos vendido: Alfombra Decorativa  

üìä *Tienda 4 refleja poca rotaci√≥n y variedad de productos.*

---

### 5. Costo Promedio de Env√≠o

| Tienda   | Costo Promedio ($) |
|----------|--------------------|
| Tienda 1 | 18.42              |
| Tienda 2 | 17.18              |
| Tienda 3 | **16.64**          |
| Tienda 4 | **19.08**          |

üöö *Tienda 4 presenta el env√≠o m√°s costoso, afectando su rentabilidad.*

---

## ‚úÖ Conclusi√≥n y Recomendaci√≥n

Despu√©s de analizar las cinco m√©tricas clave, se recomienda que el Sr. Juan **venda la Tienda 4**, debido a las siguientes razones:

- Es la tienda con **menor ingreso total**
- Tiene la **peor calificaci√≥n** de los clientes
- Su portafolio de productos es **limitado** y poco diversificado
- Posee el **costo de env√≠o m√°s elevado**
- Presenta **baja rotaci√≥n de productos**, afectando el flujo de ventas

Esta decisi√≥n permitir√° al Sr. Juan concentrar recursos en tiendas con mayor potencial de crecimiento y eficiencia operativa.

---

üéØ *Este an√°lisis busca brindar una recomendaci√≥n objetiva, sustentada en datos, para apoyar una decisi√≥n estrat√©gica con impacto positivo en el futuro del negocio.*

# 6. Extra  An√°lisis del desempe√±o geogr√°fico
"""

# Paso 1: Visualizaci√≥n geogr√°fica con Matplotlib ‚Äì Gr√°fico de dispersi√≥n
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n para cada tienda
fig, ax = plt.subplots(figsize=(10, 6))

ax.scatter(tienda['lon'], tienda['lat'], color='steelblue', label='Tienda 1', alpha=0.5)
ax.scatter(tienda2['lon'], tienda2['lat'], color='seagreen', label='Tienda 2', alpha=0.5)
ax.scatter(tienda3['lon'], tienda3['lat'], color='gold', label='Tienda 3', alpha=0.5)
ax.scatter(tienda4['lon'], tienda4['lat'], color='crimson', label='Tienda 4', alpha=0.5)

ax.set_title('Distribuci√≥n Geogr√°fica de Ventas por Tienda')
ax.set_xlabel('Longitud')
ax.set_ylabel('Latitud')
ax.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

#üî• Paso 2 (opcional avanzado): Mapa interactivo con Folium + densidad con HeatMap

import folium
from folium.plugins import HeatMap

# Crear mapa centrado
mapa = folium.Map(location=[-23.55, -46.63], zoom_start=5, tiles='CartoDB positron')  # Puedes centrarlo din√°micamente si deseas

# Agregar HeatMaps por tienda
HeatMap(data=tienda[['lat', 'lon']], radius=7, name='Tienda 1', blur=12).add_to(mapa)
HeatMap(data=tienda2[['lat', 'lon']], radius=7, name='Tienda 2', blur=12).add_to(mapa)
HeatMap(data=tienda3[['lat', 'lon']], radius=7, name='Tienda 3', blur=12).add_to(mapa)
HeatMap(data=tienda4[['lat', 'lon']], radius=7, name='Tienda 4', blur=12).add_to(mapa)

folium.LayerControl().add_to(mapa)
mapa

plt.figure(figsize=(10, 6))
plt.scatter(tienda['lon'], tienda['lat'], c=tienda['Calificaci√≥n'], cmap='coolwarm', label='Tienda 1', alpha=0.6)
plt.colorbar(label='Calificaci√≥n')
plt.title('Distribuci√≥n Geogr√°fica por Calificaci√≥n - Tienda 1')
plt.xlabel('Longitud')
plt.ylabel('Latitud')
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""# üåç An√°lisis Geogr√°fico de Ventas ‚Äì Alura Store (Extra)

## üìå Introducci√≥n

En este an√°lisis adicional se explor√≥ el comportamiento geogr√°fico de las ventas de cada tienda mediante el uso de coordenadas de **latitud** y **longitud**. El objetivo fue identificar patrones regionales en el desempe√±o de ventas, calificaciones y distribuci√≥n log√≠stica que pudieran impactar las operaciones o abrir oportunidades estrat√©gicas.

---

## üìç Distribuci√≥n Geogr√°fica de Ventas

Se utilizaron gr√°ficos de dispersi√≥n para visualizar la ubicaci√≥n de las ventas de cada tienda sobre un eje de coordenadas. El resultado evidenci√≥:

- **Tienda 1 y Tienda 2** tienen una distribuci√≥n amplia pero con focos concentrados en determinadas regiones metropolitanas.
- **Tienda 3** muestra una cobertura m√°s dispersa y equilibrada territorialmente.
- **Tienda 4** se concentra en zonas limitadas, lo cual puede estar afectando su volumen total de ventas.

---

## üî• Mapa de Calor Interactivo (HeatMap)

Mediante mapas interactivos se generaron capas de calor que permitieron identificar las zonas con mayor densidad de ventas para cada tienda. Este an√°lisis revel√≥:

- **Alta concentraci√≥n en √°reas urbanas densas** para Tienda 1 y 2, favoreciendo econom√≠as log√≠sticas de escala.
- **Zonas fr√≠as y dispersas** para Tienda 4, lo que podr√≠a explicar su mayor costo promedio de env√≠o.

---

## üß† Hallazgos Relevantes

- **Tienda 4** opera principalmente en regiones perif√©ricas con menor densidad de ventas, lo que encarece la log√≠stica y afecta tiempos de entrega.
- En contraste, **Tienda 2** logra una alta concentraci√≥n geogr√°fica de clientes y mantiene buena calificaci√≥n, reforzando su eficiencia operativa.
- Algunas regiones con **alto volumen de pedidos** presentan **menores calificaciones**, lo que podr√≠a indicar saturaci√≥n log√≠stica o deficiencia de atenci√≥n al cliente.

---

## ‚úÖ Conclusi√≥n

El an√°lisis geogr√°fico complement√≥ los hallazgos previos al confirmar que la **ubicaci√≥n de la demanda y la distribuci√≥n espacial de ventas** son factores determinantes en el rendimiento operativo de cada tienda.

**Tienda 4**, al tener presencia d√©bil y dispersa geogr√°ficamente, refuerza su perfil como la sucursal menos eficiente y con mayor vulnerabilidad log√≠stica.

---

üåê *Este componente espacial brinda una visi√≥n m√°s integral del negocio y permite evaluar decisiones estrat√©gicas considerando la dimensi√≥n territorial, un aspecto clave para expansi√≥n, inversi√≥n o consolidaci√≥n operativa.*
"""